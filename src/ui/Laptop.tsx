'use client';

import * as THREE from 'three';
import React, { Suspense, useEffect, useRef, useState } from 'react';
import { Canvas, useFrame, type ThreeEvent } from '@react-three/fiber';
import {
  Environment,
  useGLTF,
  ContactShadows,
  OrbitControls,
} from '@react-three/drei';
import { a as three } from '@react-spring/three';
import { a as web, useSpring } from '@react-spring/web';

interface ModelProps {
  src: string;
  open: boolean;
  isZoom: boolean;
  hinge: any;
}

const Model: React.FC<ModelProps> = ({
  src,
  open,
  isZoom,
  hinge,
  ...props
}) => {
  const group = useRef<any>();
  // Load model
  const { nodes, materials } = useGLTF(src) as any;
  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false);
  // const { scale } = useSpring({ scale: );
  const { scale } = useSpring({
    scale: isZoom ? 1.5 : 1,
  });

  useEffect(
    () => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'),
    [hovered]
  );
  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    if (group.current?.rotation) {
      group.current.rotation.x = THREE.MathUtils.lerp(
        group.current.rotation.x,
        open ? Math.cos(t / 10) / 10 + 0.25 : 0,
        0.1
      );
      group.current.rotation.y = THREE.MathUtils.lerp(
        group.current.rotation.y,
        open ? Math.sin(t / 10) / 4 : 0,
        0.1
      );
      group.current.rotation.z = THREE.MathUtils.lerp(
        group.current.rotation.z,
        open ? Math.sin(t / 10) / 10 : 0,
        0.1
      );
      group.current.position.y = THREE.MathUtils.lerp(
        group.current.position.y,
        open ? (-2 + Math.sin(t)) / 3 - 1 : -4.3,
        0.1
      );
    }
  });
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <three.group
      ref={group}
      {...props}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}
      scale={scale}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            material={materials.aluminium}
            geometry={nodes['Cube008'].geometry}
          />
          <mesh
            material={materials['matte.001']}
            geometry={nodes['Cube008_1'].geometry}
          />
          <mesh
            material={materials['screen.001']}
            geometry={nodes['Cube008_2'].geometry}
          />
        </group>
      </three.group>
      <mesh
        material={materials.keys}
        geometry={nodes.keyboard.geometry}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          material={materials.aluminium}
          geometry={nodes['Cube002'].geometry}
        />
        <mesh
          material={materials.trackpad}
          geometry={nodes['Cube002_1'].geometry}
        />
      </group>
      <mesh
        material={materials.touchbar}
        geometry={nodes.touchbar.geometry}
        position={[0, -0.03, 1.2]}
      />
    </three.group>
  );
};

const Laptop: React.FC<{ src: string }> = ({ src }) => {
  // This flag controls open state, alternates between true & false
  const [open, setOpen] = useState(false);
  const [isZoom, setIsZoom] = useState(false);

  // We turn this into a spring animation that interpolates between 0 and 1
  const spring = useSpring({ open: Number(open) });
  const orbitRef = useRef<any>();
  const laptopClick = (e: ThreeEvent<MouseEvent>) => {
    e.stopPropagation();
    if (open === false) setOpen(true);
  };

  const bgAnimate = useSpring({
    background: open ? '#323232' : '#ffffff',
  });

  const btnAnimate = useSpring({
    opacity: open ? '1' : '0',
    translateY: open ? '0px' : '100px',
  });

  const clickAnimate = useSpring({
    opacity: open ? '0' : '1',
    translateY: open ? '100px' : '0px',
    display: open ? 'none' : 'flex',
  });

  const dragMeAnimate = useSpring({
    opacity: open ? '0.2' : '0',
    translateY: open ? '0px' : '100px',
  });

  return (
    <web.main style={bgAnimate} className='h-full relative'>
      <web.div
        className='text-4xl text-white absolute font-extrabold top-4 left-0 w-full flex justify-center items-center tracking-widest cursor-pointer'
        style={dragMeAnimate}
      >
        DRAG ME
      </web.div>
      <Canvas
        className='absolute top-0 left-0 w-full h-full'
        dpr={[1, 2]}
        camera={{ position: [0, 0, -30], fov: 22 }}
      >
        <Suspense fallback={null}>
          <group rotation={[0, Math.PI, 0]} onClick={(e) => laptopClick(e)}>
            <Model
              isZoom={isZoom}
              src={src}
              open={open}
              hinge={spring.open.to([0, 1], [1.575, -0.4])}
            />
          </group>
          <Environment preset='city' />
        </Suspense>
        <ContactShadows
          position={[0, -4.5, 0]}
          opacity={0.4}
          scale={20}
          blur={1.75}
          far={4.5}
        />
        <OrbitControls
          enableZoom={false}
          ref={orbitRef}
          enabled={open ? true : false}
          maxDistance={35}
          minDistance={15}
        />
      </Canvas>
      <web.div
        className='text-4xl absolute font-extrabold top-0 left-0 w-full h-full flex justify-center items-center tracking-widest cursor-pointer'
        style={clickAnimate}
        onClick={() => setOpen(true)}
      >
        CLICK ME
      </web.div>
      <web.button
        className={
          'absolute top-4 right-4 font-bold text-white py-2 px-4 tracking-widest'
        }
        style={btnAnimate}
        onClick={() => {
          setOpen(false);
          setIsZoom(false);
          orbitRef.current?.reset();
        }}
      >
        CLOSE
      </web.button>
      <web.button
        className={
          'absolute top-4 left-4 font-bold text-white py-2 px-4 tracking-widest'
        }
        style={btnAnimate}
        onClick={() => {
          setIsZoom(!isZoom);
        }}
      >
        {isZoom ? 'UNZOOM' : 'ZOOM'}
      </web.button>
    </web.main>
  );
};

export default Laptop;
